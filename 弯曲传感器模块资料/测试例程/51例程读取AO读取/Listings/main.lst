C51 COMPILER V9.59.0.0   MAIN                                                              12/19/2019 11:28:39 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE User\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          /********************(C) COPRIGHT 2019 Crownto electronic **************************
   2           * 文件名  ：main.c
   3           * 描述    ：        
   4           * 硬件连接：
   5           * OLED :CS -> P2.4; RST -> P2.2; DC -> P2.3;SCL -> P2.0;SDIN -> P2.1;
   6           * 弯曲传感器模块: VCC -> 5V; GND -> GND; AO -> P1.3;
   7           * 功能描述：测量电阻值、弯曲液晶显示；
   8           * 作者    ：冠拓电子
   9           * 淘宝    ：https://shop376667309.taobao.com
  10           * 网址    ：www.crownto.cn
  11          **********************************************************************************/
  12          
  13          #include <STC12C5A60S2.h>
  14          #include <intrins.h>
  15          #include "oled.h"
  16          #include <stdio.h>
  17          #include <string.h>
  18          #include <math.h>
  19          #define uchar unsigned char
  20          #define uint  unsigned int
  21            
  22          
  23          
  24          #define MAIN_Fosc   11059200L //定义主时钟, 模拟串口和和延时会自动适应。5~35MHZ  22118400L 
  25          
  26          
  27          #define ADC_OFF() ADC_CONTR = 0
  28          #define ADC_ON    (1 << 7)
  29          #define ADC_90T   (3 << 5)
  30          #define ADC_180T  (2 << 5)
  31          #define ADC_360T  (1 << 5)
  32          #define ADC_540T  0
  33          #define ADC_FLAG  (1 << 4)  //软件清0
  34          #define ADC_START (1 << 3)  //自动清0
  35          #define ADC_CH0   0
  36          #define ADC_CH1   1
  37          #define ADC_CH2   2
  38          #define ADC_CH3   3
  39          #define ADC_CH4   4
  40          #define ADC_CH5   5
  41          #define ADC_CH6   6
  42          #define ADC_CH7   7
  43          
  44          /**************变量定义***************************/
  45          
  46          const float VCC =5.0; // 模块供电电压，ADC参考电压为V
  47          const float R_DIV =100000.0; // 分压电阻为100KΩ
  48          
  49          const float STRAIGHT_RESISTANCE =28320.0; // 平直时的电阻值  需修改
  50          const float BEND_RESISTANCE =48763.0; // 90度弯曲时的电阻值  需修改
  51          
  52          int flexADC;
  53          float flexV=0.0;
  54          float flexR=0.0;
C51 COMPILER V9.59.0.0   MAIN                                                              12/19/2019 11:28:39 PAGE 2   

  55          float angle=0.0;
  56          
  57          
  58          unsigned char V_disbuff[5]={0}; 
  59          unsigned char R_disbuff[7]={0}; 
  60          unsigned char A_disbuff[5]={0};
  61          
  62          char xdata buf1[60];
  63          //void DelayUs(unsigned int time);   //延时子函数
  64          //void Delay1(unsigned int time);    //延时主程序
  65          void  delay_ms(unsigned int ms);
  66          
  67          uint  adc10_start(uchar channel); //channel = 0~7
  68          long map(long x, long in_min, long in_max, long out_min, long out_max);
  69          void Uart1Sends(uchar *str);
  70          /*
  71           * 函数名：Get_Voltage_Value
  72           * 描述  ：获取ADC0809的转换电压值
  73           *         
  74           * 输入  ：无
  75           * 输出  ：无
  76           * 说明  ：
  77           *            AIN0(0X40):热敏电阻
  78           *            AIN1(0X41):悬空
  79           *            AIN2(0X42):滑动变阻器
  80           *            AIN3(0X43):光敏电阻
  81           */
  82          void BEND_Value_Conversion()
  83          {
  84   1          flexV=(flexADC*VCC)/1024;
  85   1          flexR= R_DIV * (VCC / flexV-1.0);
  86   1        
  87   1          /*显示电压值*/
  88   1          V_disbuff[0]=(long int)(flexV*1000)/1000+'0';
  89   1          V_disbuff[1]=(long int)(flexV*1000)%1000/100+'0'; 
  90   1          V_disbuff[2]=(long int)(flexV*1000)%100/10+'0';
  91   1          V_disbuff[3]=(long int)(flexV*1000)%10+'0';
  92   1        
  93   1          OLED_ShowString(36,2,V_disbuff);
  94   1        
  95   1         /*显示电阻值*/
  96   1          R_disbuff[0]=(long int)(flexR)/100000+'0';
  97   1          R_disbuff[1]=(long int)(flexR)%100000/10000+'0';
  98   1          R_disbuff[2]=(long int)(flexR)%10000/1000+'0';  
  99   1          R_disbuff[3]=(long int)(flexR)%1000/100+'0';
 100   1          R_disbuff[4]=(long int)(flexR)%100/10+'0';;
 101   1          R_disbuff[5]=(long int)(flexR)%10+'0';
 102   1          
 103   1          OLED_ShowString(36,4,R_disbuff);
 104   1          /*显示角度值*/
 105   1          if(angle<0)
 106   1          {
 107   2            A_disbuff[0]='-'; 
 108   2            A_disbuff[1]=(int)(abs(angle))/100+'0'; 
 109   2            A_disbuff[2]=(int)(abs(angle))%100/10+'0';
 110   2            A_disbuff[3]=(int)(abs(angle))%10+'0';
 111   2          }
 112   1          else
 113   1          {
 114   2            A_disbuff[0]=' '; 
 115   2            A_disbuff[1]=(int)(angle)/100+'0';  
 116   2            A_disbuff[2]=(int)(angle)%100/10+'0';
C51 COMPILER V9.59.0.0   MAIN                                                              12/19/2019 11:28:39 PAGE 3   

 117   2            A_disbuff[3]=(int)(angle)%10+'0';
 118   2          }
 119   1      
 120   1          
 121   1          OLED_ShowString(27,6,A_disbuff);
 122   1        
 123   1      }
 124           
 125          void send_data(void)
 126          {
 127   1          memset(buf1, 0, sizeof(buf1));
 128   1          sprintf(buf1, "Voltage:%f V\r\n",flexV);
 129   1          Uart1Sends(buf1);
 130   1          memset(buf1, 0, sizeof(buf1));
 131   1          sprintf(buf1, "Resistance:%f ohms\r\n",flexR);
 132   1          Uart1Sends(buf1);
 133   1          memset(buf1, 0, sizeof(buf1));
 134   1          sprintf(buf1, "Bend:%f degrees\r\n",angle);
 135   1          Uart1Sends(buf1);
 136   1          delay_ms(500);
 137   1      }
 138          
 139          void StartUART( void )
 140          {               //波特率9600
 141   1           SCON = 0x50;
 142   1           TMOD = 0x20;
 143   1           TH1 = 0xFD;
 144   1           TL1 = 0xFD; 
 145   1           PCON = 0x00;
 146   1           TR1 = 1;
 147   1      }
 148          //**********通过串口将接收到数据发送给PC端**************
 149          void R_S_Byte(uchar R_Byte)
 150          { 
 151   1         SBUF = R_Byte;  
 152   1           while( TI == 0 );        //查询法
 153   1           TI = 0;    
 154   1      }
 155          //串行口连续发送char型数组，遇到终止号/0将停止
 156          void Uart1Sends(uchar *str)
 157          {
 158   1        while(*str!='\0')
 159   1        {
 160   2          SBUF=*str;
 161   2          while(!TI);//等待发送完成信号（TI=1）出现
 162   2          TI=0;
 163   2          str++;
 164   2        }
 165   1      }
 166          /*
 167           * 函数名：main
 168           * 描述  ：主函数
 169           * 输入  ：无
 170           * 输出  ：无
 171           */
 172          void main(void)
 173          { 
 174   1        StartUART();
 175   1        OLED_Init();      //初始化OLED  
 176   1        OLED_Clear()    ; 
 177   1      
 178   1        P1ASF = 0x0F;     //12C5A60AD/S2系列模拟输入(AD)选择
C51 COMPILER V9.59.0.0   MAIN                                                              12/19/2019 11:28:39 PAGE 4   

 179   1        ADC_CONTR = ADC_360T | ADC_ON;
 180   1      
 181   1        OLED_ShowCHinese(0,0,0);
 182   1        OLED_ShowCHinese(18,0,1);
 183   1        OLED_ShowCHinese(36,0,2);
 184   1        OLED_ShowCHinese(54,0,3);
 185   1        OLED_ShowCHinese(72,0,4);
 186   1        OLED_ShowCHinese(90,0,5);
 187   1        OLED_ShowCHinese(108,0,6);
 188   1        OLED_ShowString(0,2,"V:");  
 189   1        OLED_ShowString(0,4,"R:");
 190   1        OLED_ShowString(0,6,"A:");  
 191   1        OLED_ShowString(71,2,"mv"); 
 192   1        OLED_ShowCHinese(90,4,7);
 193   1        OLED_ShowCHinese(63,6,8); 
 194   1        
 195   1        
 196   1        while(1)
 197   1        {
 198   2            flexADC = adc10_start(3); 
 199   2            angle = map(flexR, STRAIGHT_RESISTANCE, BEND_RESISTANCE,0, 90.0);   
 200   2            BEND_Value_Conversion();
 201   2            send_data();
 202   2        }
 203   1      }
 204          
 205          //map函数
 206          long map(long x, long in_min, long in_max, long out_min, long out_max) {
 207   1       return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 208   1      }
 209          
 210          ///********************* 做一次ADC转换 *******************/
 211          uint  adc10_start(uchar channel)  //channel = 0~7
 212          {
 213   1        uint  adc;
 214   1        uchar i;
 215   1      
 216   1        ADC_RES = 0;
 217   1        ADC_RESL = 0;
 218   1      
 219   1        ADC_CONTR = (ADC_CONTR & 0xe0) | ADC_START | channel; 
 220   1      
 221   1        i = 250;
 222   1        do{
 223   2          if(ADC_CONTR & ADC_FLAG)
 224   2          {
 225   3            ADC_CONTR &= ~ADC_FLAG;
 226   3            adc = (uint)ADC_RES;
 227   3            adc = (adc << 2) | (ADC_RESL & 3);
 228   3            return  adc;
 229   3          }
 230   2        }while(--i);
 231   1        return  1024;
 232   1      }
 233          
 234          
 235          
 236          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1328    ----
C51 COMPILER V9.59.0.0   MAIN                                                              12/19/2019 11:28:39 PAGE 5   

   CONSTANT SIZE    =     66    ----
   XDATA SIZE       =     60    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     47      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
